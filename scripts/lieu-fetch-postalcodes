#!/usr/bin/env python
# -*-python-*-

import os
import sys
import csv
import mapzen.whosonfirst.api.client
import logging

if __name__ == "__main__":

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-A', '--api-key', dest='api_key', action='store', default=None, help='... (Default is None)')

    opt_parser.add_option('-O', '--outfile', dest='outfile', action='store', default=None, help="... (Default is STDOUT)")

    opt_parser.add_option('-d', '--debug', dest='debug', action='store_true', default=False, help='... (Default is False)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is False)')

    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.outfile:
        out = open(options.outfile, "w")
    else:
        out = sys.stdout

    api = mapzen.whosonfirst.api.client.Mapzen(options.api_key)

    def cb(rsp):

        for pl in rsp["places"]:

            lat = pl.get("geom:latitude", 0.0)
            lon = pl.get("geom:longitude", 0.0)

            if lat == 0.0 and lon == 0.0:
                continue

            name = pl["wof:name"]
            
            out = (
                name,
                lat, 
                lon
            )
                
            writer = csv.writer(sys.stdout)
            writer.writerow(out)

        return True

    for id in args:

        method="whosonfirst.places.getDescendants"
        
        params = {
            "id": id,
            "placetype": "postalcode",
            "extras": "geom:"
        }

        api.execute_method_paginated(method, params, cb)
