#!/usr/bin/env python

import os
import sys
import logging
import json

import datetime

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.export
import mapzen.whosonfirst.sources

import mapzen.whosonfirst.lieu

# please move this in to import mapzen.whosonfirst.utils (probably?)

def add_concordance(f, src, id, **kwargs):

    data_root = kwargs.get("data_root", "/usr/local/data")

    # this should probably be invoked sooner before even call this

    props = f["properties"]
    wofid = props["wof:id"]
    repo = props["wof:repo"]
        
    root = os.path.join(data_root, repo)
    data = os.path.join(root, "data")

    f = mapzen.whosonfirst.utils.load(data, wofid)
    props = f["properties"]

    concordances = props.get("wof:concordances", {})

    if concordances.get(src):

        if concordances[src] == id:
            logging.debug("%s already has this concordance (%s (%s)), skipping" % (wofid, src, concordances[src]))
            return False

        logging.warning("%s already has a concordance with %s (%s) - what is %s (%s)" % (wofid, src, concordances[src], src, id))
        return False

    concordances[src] = id
    props["wof:concordances"] = concordances

    if kwargs.has_key("is_current") and props.get("mz:is_current", -1) == -1:
        props["mz:is_current"] = kwargs["is_current"]
        
    f["properties"] = props

    exporter = mapzen.whosonfirst.export.flatfile(data)

    if options.debug:
        logging.info("debugging is enabled otherwise we would export %s here" % wofid)
        return True

    logging.info("export %s" % exporter.export_feature(f))
    return True
    
def supersede_features(principal, to_supersede, **kwargs):

    data_root = kwargs.get("data_root", "/usr/local/data")

    # this should probably be invoked sooner before even call this

    p_props = principal["properties"]
    p_wofid = p_props["wof:id"]
    p_repo = p_props["wof:repo"]
        
    p_root = os.path.join(data_root, p_repo)
    p_data = os.path.join(p_root, "data")

    principal = mapzen.whosonfirst.utils.load(p_data, p_wofid)
    others = []
    
    for o in to_supersede:

        o_props = o["properties"]
        o_wofid = o_props["wof:id"]
        o_repo = o_props["wof:repo"]

        root = os.path.join(data_root, o_repo)
        data = os.path.join(root, "data")

        o = mapzen.whosonfirst.utils.load(data, o_wofid)
        others.append(o)

    # first update the things being superseded

    for o in others:

        o_props = o["properties"]
        o_props["mz:is_current"] = 0
        
        sb = o_props.get("wof:superseded_by", [])

        if not p_wofid in sb:
            sb.append(p_wofid)

        o_props["wof:superseded_by"] = sb

        if kwargs.get("deprecate_superseded", False):

            today = datetime.date.today()
            ymd = today.isoformat()
            o_props["edtf:deprecated"] = ymd

        o["properties"] = o_props

        o_repo = o_props["wof:repo"]
        o_root = os.path.join(data_root, o_repo)
        o_data = os.path.join(o_root, "data")

        exporter = mapzen.whosonfirst.export.flatfile(o_data)

        if options.debug:
            logging.info("debugging is enabled otherwise we would export %s here" % o_wofid)
            continue

        logging.info("export %s" % exporter.export_feature(o))

    # now update the principal

    s = p_props.get("wof:supersedes", [])

    for o in others:

        o_props = o["properties"]
        o_wofid = o_props["wof:id"]

        if not o_wofid in s:
            s.append(o_wofid)

    p_props["wof:supersedes"] = s
    principal["properties"] = p_props

    exporter = mapzen.whosonfirst.export.flatfile(p_data)

    if options.debug:
        logging.info("debugging is enabled otherwise we would export %s here" % p_wofid)
        return

    logging.info("export %s" % exporter.export_feature(principal))

if __name__ == "__main__":

    # /usr/local/bin/lieu-dupes-process ./deduped5/part-00*

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-D', '--data-root', dest='data_root', action='store', default="/usr/local/data", help='... (Default is /usr/local/data')
    opt_parser.add_option('-S', '--strict', dest='strict', action='store_true', default=False, help='... (Default is False)')

    opt_parser.add_option('-d', '--debug', dest='debug', action='store_true', default=False, help='... (Default is False)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is False)')

    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    all_superseded = []

    supersedes = 0
    concordances = 0

    skipped_supersedes = 0
    skipped_concordances = 0

    other_to_wof = {}
    other_to_other = {}

    ts = mapzen.whosonfirst.lieu.to_string	# this is just here to save typing (20170723/thisisaaronland)

    crawl = mapzen.whosonfirst.lieu.crawl(args)

    for dupe, feature, same_as, err in crawl:
        
        if err != None:
            logging.error(err)
            continue

        source_prefix, source_key, id, err = mapzen.whosonfirst.lieu.parse_feature_id(feature)

        if err != None:
            logging.error(err)
            logging.debug(feature)
            sys.exit()

        if options.strict:

            if not mapzen.whosonfirst.sources.is_valid_source(source_prefix):
                logging.error("%s is an invalid or unknown source" % source_prefix)
                sys.exit(1)

        # for now... (20170721/thisisaaronland)

        if dupe == False:

            """
            if source_prefix != "wof": 
                logging.debug("SKIPPING because no dupes\n%s" % ts(feature))
            """

            continue
        
        # logging.debug("processing for %s:%s=%s" % (source_prefix, source_key, id))

        if source_prefix == "wof":

            other = []
            other_wof = []

            principal_wof = None
            superseded_wof = []

            for sa in same_as:

                other_feature = sa["object"]
                other_source_prefix, other_source_key, ignore, err = mapzen.whosonfirst.lieu.parse_feature_id(other_feature)
            
                if err != None:
                    logging.error(err)
                    logging.debug(other_feature)
                    sys.exit(1)

                if not other_feature.get("is_canonical", False): 
                    skipped_supersedes += 1
                    continue

                if other_source_prefix == "wof":
                    other_wof.append(sa)

            # first sort things according to lieu's ranking
            # still waiting on confirmation from al b. about this

            # TO DO: please make crawl() return vanilla features and
            # not things with objects (20170721/thisisaaronland)

            if len(other_wof) == 0:
                principal_wof = feature

            elif len(other_wof) == 1:
                principal_wof = other_wof[0]["object"]
                superseded_wof.append(feature)

            else:
                principal_wof = other_wof[0]["object"]
                superseded_wof.append(feature)
                
                for f in other_wof[1:]:
                    superseded_wof.append(f["object"])                    

            # now we're just going to double check to make sure
            # that any of the superseded records haven't been
            # modified more recently than the principal or that
            # the principal has already been superseded etc

            # PLEASE FINISH WRITING ME (20170721/thisisaaronland)

            principal_wofid = principal_wof["properties"]["wof:id"]
            superseded_wofid = []

            for f in superseded_wof:
                
                other_wofid = f["properties"]["wof:id"]
                superseded_wofid.append(other_wofid)

                logging.debug("SUPERSEDED BY:\n%s is superseded by\n%s" % (ts(f), ts(principal_wof)))

                if not other_wofid in all_superseded:
                    all_superseded.append(other_wofid)

            if principal_wofid in all_superseded:
                logging.warning("WAIT... %s has been superseded already" % principal_wofid)
                continue

            for o in superseded_wof:
                logging.debug("SUPERSEDES:\n%s supersedes\n%s" % (ts(principal_wof), ts(o)))
                
            kwargs = {
                "data_root": options.data_root,
                "debug": options.debug,
                "deprecate_superseded": True	# CLI switch?
            }

            if len(superseded_wof):
                supersede_features(principal_wof, superseded_wof, **kwargs)
                supersedes += 1

        else:

            concordance_key = "%s:%s" % (source_prefix, source_key)
            concordance_id = id

            for other in same_as:

                other_feature = other["object"]

                other_source_prefix, other_source_key, other_id, err = mapzen.whosonfirst.lieu.parse_feature_id(other_feature)
            
                if err != None:
                    logging.error(err)
                    continue

                if other_source_prefix == "wof":

                    wofid = other_feature["properties"]["wof:id"]

                    if wofid in all_superseded:
                        logging.warning("%s has been superseded so skipping concordance (with %s#%s)" % (wofid, concordance_key, concordance_id))

                        skipped_concordances += 1
                        continue

                    other_to_wof[ wofid ] = concordance_id

                    kwargs = {
                        "data_root": options.data_root,
                        "debug": options.debug,
                        "is_current": 1
                    }

                    logging.debug("CONCORDANCE:\n%s is the same as\n%s" % (ts(other_feature), ts(feature)))

                    if add_concordance(other_feature, concordance_key, concordance_id, **kwargs):
                        concordances += 1

                else:

                    o = other_to_other.get(concordance_id, [])
                    if not other_id in o:
                        o.append(other_id)

                    other_to_other[concordance_id] = o

    for k, v in other_to_other.items():

        if not other_to_wof.get(k):
            continue

        wofid = other_to_wof[k]
        others = other_to_other[k]

        logging.info("WOF ID %s also has a concordance with %s" % (wofid, others))

    logging.info("supersedes: %s (%s skipped)" % (supersedes, skipped_supersedes))
    logging.info("concordances: %s (%s skipped)" % (concordances, skipped_concordances))
