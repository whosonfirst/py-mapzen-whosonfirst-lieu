#!/usr/bin/env python
# -*-python-*-

import os
import sys
import geojson
import logging
import bz2

if __name__ == "__main__":

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-S', '--strict', dest='strict', action='store_true', default=False, help='... (Default is False)')
    opt_parser.add_option('-C', '--cranky', dest='cranky', action='store_true', default=False, help='... (Default is False)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is False)')

    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.cranky:
        options.strict = True

    for path in args:

        abs_path = os.path.abspath(path)

        if abs_path.endswith(".bz2"):
            fh = bz2.BZ2File(abs_path, "r")
        else:
            fh = open(abs_path, "r")

        lineno = 0

        for ln in fh:

            lineno +=1 

            try:
                data = geojson.loads(ln)
            except Exception, e:
                logging.error("invalid geojson, %s ln %s" % (abs_path, lineno))
                logging.debug(ln)
                logging.debug(e)

                if options.strict:
                    sys.exit(1)

                continue

            ft = data.get("type", None)

            if ft != "Feature":
                logging.error("invalid feature type, %s ln %s" % (abs_path, lineno))

                if options.strict:
                    sys.exit(1)

                continue

            source_id = data.get("id", None)
            geom = data.get("geometry", None)
            props = data.get("properties", None)

            if source_id == None:
                logging.error("missing source id, %s ln %s" % (abs_path, lineno))

                if options.strict:
                    sys.exit(1)

                continue

            if geom == None:
                logging.error("missing geometry, %s ln %s" % (abs_path, lineno))

                if options.strict:
                    sys.exit(1)

                continue

            if props == None:
                logging.error("missing properties, %s ln %s" % (abs_path, lineno))

                if options.strict:
                    sys.exit(1)

                continue

            gt = geom.get("type", None)

            if gt != "Point":
                logging.error("invalid geometry type, %s ln %s" % (abs_path, lineno))

                if options.strict:
                    sys.exit(1)

                continue
                
            for k in ("name", "addr:street", "addr:housenumber"):

                if props.get(k, None) == None:

                    logging.error("missing %s property, %s ln %s" % (k, abs_path, lineno))

                    logging.debug(props)

                    if options.cranky:
                        sys.exit(1)

                    continue
                    
