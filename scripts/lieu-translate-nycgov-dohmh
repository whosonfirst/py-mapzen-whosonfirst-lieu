#!/usr/bin/env python
# -*-python-*-

import os
import sys
import csv
import logging

if __name__ == "__main__":

    """
    from al b. (20170723)

    ZIP code centroids should be fine.

    As mentioned, lat/lons in lieu are mainly used for blocking or grouping things
    that might be dupes together for pairwise comparison. For venues we use a geohash
    prefix of 6, which equates to about 1.2km x 0.6km, plus its 8 neighbors to avoid
    the fault line issue, so 9 tiles total covering a grid that's roughly 3.6km x 1.8km.
    If the real venue is within that distance of the postal code centroid, they'll still
    match.
    """

    logging.warning("EXPERIMENTAL. THIS DOESN'T REALLY DO ANYTHING YET...")

    # first dedupe this:
    # https://data.cityofnewyork.us/Health/DOHMH-New-York-City-Restaurant-Inspection-Results/xx67-kt59

    # which is pretty much the same as this:
    # https://data.cityofnewyork.us/Health/Restaurants-rolled-up-/59dk-tdhz

    orig = sys.argv[1]
    fh = open(orig, "r")

    reader = csv.DictReader(fh)
    writer = None

    lookup = {}

    for row in reader:

        camis = row["CAMIS"]

        if lookup.get(camis, None):
            continue

        postalcode = row["ZIPCODE"]

        # PLEASE GET POSTALCODE HERE...

        if not writer:
            writer = csv.DictWriter(sys.stdout, fieldnames=row.keys())
            writer.writeheader()

        keys = "CAMIS,DBA,BORO,BUILDING,STREET,ZIPCODE,PHONE,CUISINE DESCRIPTION"
        keys = keys.split(",")

        for k, v in row.items():

            if not k in keys:
                del(row[k])

        writer.writerow(row)
        lookup[camis] = True
    
    logging.error("please finish writing me")
    sys.exit(1)
	
        
