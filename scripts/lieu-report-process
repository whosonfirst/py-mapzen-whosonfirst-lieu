#!/usr/bin/env python

import sys
import os
import pprint
import copy
import logging

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.export
import mapzen.whosonfirst.lieu.utils

if __name__ == "__main__":
            
            import optparse
            opt_parser = optparse.OptionParser()
            
            opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is False)')
            
            options, args = opt_parser.parse_args()
            
            if options.verbose:
                        logging.basicConfig(level=logging.DEBUG)
            else:
                        logging.basicConfig(level=logging.INFO)
                        
            crawl = mapzen.whosonfirst.lieu.utils.crawl(args)

            osm_concordances = 0
            osm_multiple = 0

            superseded_count = 0
            supersedes_count = 0

            updated = []

            for row in crawl:

                        if not row["is_dupe"]:
                                    continue

                        same_as = []

                        for other in row.get("same_as", []):

                                    if other["classification"] == "exact_dupe":
                                                same_as.append(other["object"])

                        if len(same_as) == 0:
                                    continue

                        principal = row["object"]                

                        # first just figure out if we have any WOF documents

                        has_wof = False

                        if principal["properties"].has_key("wof:id"):
                                    has_wof = True

                        for other in same_as:
                                    if other["properties"].has_key("wof:id"):
                                                has_wof = True
                                    
                        if not has_wof:
                                    continue

                        # now ensure that the principal record is a WOF record

                        if not principal["properties"].has_key("wof:id"):
                                    
                                    count = len(same_as)
                                    idx = 0

                                    for other in same_as:

                                                if other["properties"].has_key("wof:id"):

                                                            o = copy.deepcopy(other)
                                                            same_as[idx] = principal
                                                            principal = o
                                                            break

                                                idx += 1

                        # now sort things in to buckets

                        other_wof = []
                        other_osm = []

                        for other in same_as:

                                    if other["properties"].has_key("wof:id"):
                                                other_wof.append(other)
                                    else:
                                                other_osm.append(other)

                        # make sure the principal record is the principal record
                        # THIS WHOLE SECTION NEEDS TO BE MADE MORE BETTER

                        principal_props = principal["properties"]
                        principal_id = principal_props["wof:id"]
                        principal_repo = principal_props["wof:repo"]

                        principal_current = principal_props.get("mz:is_current", -1)
                        principal_lastmod = principal_props.get("wof:lastmodified", 0)

                        principal_supersededby = principal_props.get("wof:superseded_by", [])

                        if len(principal_supersededby):
                                    print "ACK!"

                        idx = 0

                        for other in other_wof:

                                    other_props = other["properties"]
                                    other_current = other_props.get("mz:is_current", -1)
                                    other_lastmod = other_props.get("wof:lastmodified", 0)

                                    if other_current == 0:
                                                continue

                                    if other_current == 1 and principal_current != 1:
                                                print "SQUAWK"
                                                continue

                                    if other_lastmod > principal_lastmod:
                                                pass

                        # no other wof record - just concordances

                        if len(other_osm) == 1:

                                    principal_props = principal["properties"]
                                    principal_id = principal_props.get("wof:id", None)
                                    principal_repo = principal_props.get("wof:repo", None)

                                    if principal_id == None or principal_repo == None:
                                                continue

                                    osm_props = other_osm[0]["properties"]
                                    osm_id = osm_props["id"]
                                    osm_type = osm_props["type"]

                                    osm_key = "osm:%s" % osm_type

                                    root = "/usr/local/data"
                                    root = os.path.join(root, principal_repo)
                                    data = os.path.join(root, "data")

                                    principal_feature = mapzen.whosonfirst.utils.load(data, principal_id)
                                    principal_props = principal_feature["properties"]
                                    
                                    concordances = principal_props.get("wof:concordances", {})
                                    concordances[ osm_key ] = int(osm_id)

                                    principal_props["wof:concordances"] = concordances
                                    principal_props["mz:is_current"] = 1

                                    principal_feature["properties"] = principal_props

                                    exporter = mapzen.whosonfirst.export.flatfile(data)
                                    exporter.export_feature(principal_feature)

                                    if not principal_repo in updated:
                                                updated.append(principal_repo)

                                    # print "%s %s=%s" % (principal_id, osm_key, osm_id)
                                    osm_concordances += 1

                        if len(other_osm) > 1:

                                    osm_multiple += 1

                        if len(other_wof):

                                    other_ids = []

                                    for other in other_wof:
                                                
                                                other_props = other["properties"]
                                                other_id = other_props["wof:id"]
                                                other_repo = other_props["wof:repo"]

                                                other_ids.append(other_id)

                                                other_root = "/usr/local/data"
                                                other_root = os.path.join(other_root, other_repo)
                                                other_data = os.path.join(other_root, "data")

                                                try:
                                                            other_feature = mapzen.whosonfirst.utils.load(other_data, other_id)
                                                except Exception, e:
                                                            logging.error("failed to load %s (%s) because %s" % (other_id, other_data, e))
                                                            continue

                                                other_props = other_feature["properties"]

                                                ymd = "2017-11-15"	# please fix me

                                                other_props["edtf:deprecated"] = ymd
                                                other_props["mz:is_current"] = 0

                                                other_superseded_by = other_props.get("wof:superseded_by", [])
                                    
                                                if not principal_id in other_superseded_by:
                                                            other_superseded_by.append(principal_id)

                                                other_props["wof:superseded_by"] = other_superseded_by
                                                other_feature["properties"] = other_props

                                                exporter = mapzen.whosonfirst.export.flatfile(data)
                                                exporter.export_feature(other_feature)
                                                
                                                if not other_repo in updated:
                                                            updated.append(other_repo)

                                                superseded_count += 1

                                    principal_root = "/usr/local/data"
                                    principal_root = os.path.join(principal_root, principal_repo)
                                    principal_data = os.path.join(principal_root, "data")

                                    try:
                                                principal_feature = mapzen.whosonfirst.utils.load(principal_data, principal_id)
                                    except Exception, e:
                                                logging.error("failed to load %s (%s) because %s" % (principal_id, principal_data, e))
                                                continue
                                                
                                    principal_props = principal_feature["properties"]

                                    principal_supersedes = principal_props.get("wof:supersedes", [])

                                    for id in other_ids:
                                                if not id in principal_supersedes:
                                                            principal_supersedes.append(id)
                                                            
                                    principal_props["wof:supersedes"] = principal_supersedes
                                    principal_feature["properties"] = principal_props

                                    exporter = mapzen.whosonfirst.export.flatfile(principal_data)
                                    exporter.export_feature(principal_feature)
                                    
                                    if not principal_repo in updated:
                                                updated.append(principal_repo)

                                    supersedes_count += 1

            print "OSM concordances: %s multiple: %s" % (osm_concordances, osm_multiple)
            print "WOF supersedes: %s superseded: %s" % (supersedes_count, superseded_count)

            print ";".join(updated)
